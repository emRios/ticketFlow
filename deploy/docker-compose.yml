# Docker Compose - TicketFlow
# Servicios de infraestructura y aplicaciones

version: '3.8'

services:
  # ============================================
  # INFRASTRUCTURE SERVICES
  # ============================================

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ticketflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ticketflow
      POSTGRES_USER: ticketflow_user
      POSTGRES_PASSWORD: ticketflow_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ticketflow_user -d ticketflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketflow-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: ticketflow-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ticketflow_user
      RABBITMQ_DEFAULT_PASS: ticketflow_pass
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketflow-network

  # Dev helper: crea cola de depuraci√≥n y binding al exchange 'tickets'
  rabbitmq-debug-setup:
    image: curlimages/curl:8.7.1
    container_name: ticketflow-rabbitmq-debug-setup
    depends_on:
      rabbitmq:
        condition: service_healthy
      worker:
        condition: service_started
    command: >-
      sh -c "
      echo '‚è≥ Esperando RabbitMQ...';
      until curl -sf http://rabbitmq:15672/api/healthchecks/node >/dev/null; do sleep 2; done;
      echo '‚è≥ Esperando exchange tickets...';
      until curl -sf -u ticketflow_user:ticketflow_pass http://rabbitmq:15672/api/exchanges/%2f/tickets >/dev/null; do sleep 2; done;
      echo 'üõ†Ô∏è  Creando cola debug.tickets y binding ticket.# -> tickets';
      curl -s -u ticketflow_user:ticketflow_pass -H 'content-type: application/json' -XPUT http://rabbitmq:15672/api/queues/%2f/debug.tickets -d '{"durable":true}';
      curl -s -u ticketflow_user:ticketflow_pass -H 'content-type: application/json' -XPOST http://rabbitmq:15672/api/bindings/%2f/e/tickets/q/debug.tickets -d '{"routing_key":"ticket.#","arguments":{}}';
      echo '‚úÖ Listo: cola debug.tickets enlazada a exchange tickets';
      "
    networks:
      - ticketflow-network
    restart: "no"

  # ============================================
  # APPLICATION SERVICES
  # ============================================

  # API Backend
  api:
    build:
      context: ../src/server/backend
      dockerfile: Api/Dockerfile
    image: ticketflow-api:latest
    container_name: ticketflow-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5076
      # Connection Strings
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=ticketflow;Username=ticketflow_user;Password=ticketflow_pass
      # JWT Settings
      - Jwt__SecretKey=SuperSecretKey123456789012345678901234567890
      - Jwt__Issuer=TicketFlowApi
      - Jwt__Audience=TicketFlowClient
      - Jwt__ExpirationMinutes=60
      # RabbitMQ Settings
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__Username=ticketflow_user
      - RabbitMQ__Password=ticketflow_pass
      - RabbitMQ__Exchange=tickets
      # Logging
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
    env_file:
      - ./env/backend.env
    ports:
      - "5076:5076"
    networks:
      - ticketflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5076/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker (Outbox Processor)
  worker:
    build:
      context: ../src/server
      dockerfile: worker/Dockerfile
    image: ticketflow-worker:latest
    container_name: ticketflow-worker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      api:
        condition: service_started
    environment:
      - DOTNET_ENVIRONMENT=Development
      # Connection Strings
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=ticketflow;Username=ticketflow_user;Password=ticketflow_pass
      # RabbitMQ Settings
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__Username=ticketflow_user
      - RabbitMQ__Password=ticketflow_pass
      - RabbitMQ__Exchange=tickets
      # Logging
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__TicketFlow.Worker=Debug
    env_file:
      - ./env/worker.env
    networks:
      - ticketflow-network

# ============================================
# VOLUMES
# ============================================

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

# ============================================
# NETWORKS
# ============================================

networks:
  ticketflow-network:
    driver: bridge

# ============================================
# NOTAS DE USO
# ============================================
# 
# Levantar solo infraestructura:
#   docker compose up postgres rabbitmq -d
#
# Levantar todo:
#   docker compose up -d
#
# Ver logs:
#   docker compose logs -f api
#   docker compose logs -f worker
#
# Rebuild y restart:
#   docker compose up --build -d
#
# Detener todo:
#   docker compose down
#
# Limpiar vol√∫menes:
#   docker compose down -v
# ============================================
#
# Levantar solo infraestructura (PostgreSQL + RabbitMQ):
#   docker compose --profile infra up -d
#
# Levantar aplicaciones (API + Worker):
#   docker compose --profile app up -d
#
# Levantar todo (infra + app):
#   docker compose --profile infra --profile app up -d
#   # O m√°s simple:
#   docker compose up -d  # (solo si se elimina profiles)
#
# Verificar servicios:
#   docker compose ps
#
# Ver logs:
#   docker compose logs -f postgres
#   docker compose logs -f rabbitmq
#
# Detener servicios:
#   docker compose --profile infra down
#   docker compose --profile app down
#
# Eliminar vol√∫menes (datos persistentes):
#   docker compose down -v
#
# Acceso a servicios:
#   - PostgreSQL: localhost:5432 (user: ticketflow_user, pass: ticketflow_pass)
#   - RabbitMQ UI: http://localhost:15672 (user: ticketflow_user, pass: ticketflow_pass)
#   - API: http://localhost:5000 (cuando est√© implementado)
#
